#!/usr/bin/env python3
import subprocess
import os

# The purpose of this script is to break down files into semantic categories so they can be committed separately.
#
# Run the script, then add and commit each category of files with a separate semantic commit. The code category needs to
# be further broken down (feat, fix, perf, refactor, or style).

def get_git_status():
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True, check=True)
        return result.stdout.rstrip().split('\n')
    except subprocess.CalledProcessError:
        print("Error: Not a git repository or git command failed.")
        return []

def classify_files(files):
    categories = {
        'build': [],
        'ci': [],
        'docs': [],
        'test': [],
        'code': []
    }

    file_statuses = {}

    for file in files:
        if file:
            status, path = file[:2], file[3:]
            file_statuses[path] = status.strip()
            if any(build_file in path.lower() for build_file in ['composer', 'gulp', 'bower', 'npm', 'package.json', 'yarn.lock']):
                categories['build'].append(path)
            elif '.gitlab-ci.yml' in path.lower():
                categories['ci'].append(path)
            elif path.lower().endswith(('.md', '.txt', '.rst')):
                categories['docs'].append(path)
            elif 'test' in path.lower() or path.lower().startswith('tests/'):
                categories['test'].append(path)
            else:
                categories['code'].append(path)

    return categories, file_statuses

def print_categories(categories, file_statuses):
    for category, files in categories.items():
        if files:
            print(f"\n{category.capitalize()} changes:")
            for file in files:
                status = file_statuses.get(file, '')
                print(f"  - {file} ({status})")

def main():
    if not os.path.exists('.git'):
        print("Error: Not a git repository.")
        return

    status_output = get_git_status()
    if not status_output:
        print("No changes detected.")
        return

    categories, file_statuses = classify_files(status_output)
    print_categories(categories, file_statuses)

if __name__ == "__main__":
    main()
