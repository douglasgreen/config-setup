#!/usr/bin/env python3
import subprocess
import os
import sys

def get_staged_files():
    try:
        result = subprocess.run(['git', 'diff', '--cached', '--name-status'], capture_output=True, text=True, check=True)
        files = {}
        for line in result.stdout.strip().split('\n'):
            if line:
                parts = line.split('\t')
                status = parts[0]
                if status.startswith('R'):
                    # @todo Figure out how to support renames so they appear as diff not a new file
                    print("Error: Renames are not supported and should be committed in a separate changeset.")
                    print(f"Renamed file detected: {parts[1]} -> {parts[2]}")
                    sys.exit(1)
                else:
                    file = parts[1]
                    files[file] = status
        return files
    except subprocess.CalledProcessError:
        print("Error: Not a git repository or git command failed.")
        sys.exit(1)

def get_diff_excluding_large_files(files):
    excluded_files = ['package-lock.json', 'composer.lock', 'yarn.lock']
    diff = ""
    total_lines = 0

    for file, status in files.items():
        if status == 'D' or file in excluded_files:
            continue
        try:
            result = subprocess.run(['git', 'diff', '--cached', file], capture_output=True, text=True, check=True)
            file_diff = result.stdout
            diff += f"File: {file}\n{file_diff}\n\n"
            total_lines += len(file_diff.split('\n'))
        except subprocess.CalledProcessError:
            print(f"Error: Unable to get diff for {file}")

    return diff, total_lines

def create_output_file(staged_files, diff, total_lines):
    with open('commit_review.txt', 'w') as f:
        # Print instructions for ChatGPT
        f.write("Please review the contents of the following files and create a conventional commit message header and body. ")
        f.write("Conventional commits have a type of build, chore, ci, docs, feat, fix, perf, refactor, revert, style, or test.\n\n")

        f.write("Staged files:\n")
        for file, status in staged_files.items():
            if status == 'A':
                status_str = "added"
            elif status == 'D':
                status_str = "deleted"
            else:
                status_str = "modified"
            f.write(f"- {file} ({status_str})\n")
        f.write("\n")

        f.write("Diff of changed files (excluding large files):\n")
        f.write(diff)

def main():
    if not os.path.exists('.git'):
        print("Error: Not a git repository.")
        sys.exit(1)

    staged_files = get_staged_files()
    if not staged_files:
        print("Error: No files are staged. Please stage some changes before running this script.")
        sys.exit(1)

    diff, total_lines = get_diff_excluding_large_files(staged_files)

    if total_lines > 1000:
        print("Error: More than 1000 lines changed. Too large to review at one time.")
    elif total_lines > 500:
        print("Warning: More than 500 lines changed.")

    create_output_file(staged_files, diff, total_lines)
    print(f"Output file 'commit_review.txt' created with {total_lines} lines of diff.")

if __name__ == "__main__":
    main()
